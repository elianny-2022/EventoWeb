@page "/boletos/{eventoId}"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div className="Container" class="card border-secondary mb-3" style="Margin: 15px;">
            <div class="card shadow-lg">
                <div class="card">
                    <div class="card-header">
                        <div class="card text-center">
        @if (boleto == null)
        {
            <p>Cargando evento...</p>
        }
        else
        {
            <div class="ticket-container">
            <h2>Evento: @evento.nombreEvento</h2>
            <p>Tipo de Evento: @evento.tipoEvento</p>
            <p>Fecha: @evento.fecha</p>
            <p>Hora: @evento.hora</p>
            <p>Ubicación: @evento.ubicacion</p>
    <p></p>
    
 
   <div>
         <p></p>
         <label>Ingrese cantidad de boletos a reservar</label>
        <InputNumber @bind-Value="reducir" />
        <label>Boletos disponibles</label>
        <InputNumber disable @bind-Value="boleto.cantidadBoletos"/>
        <p></p>
        
    </div>
    <div class="text-center">
        <p>Precio: @boleto.precio.00</p>
    </div>

    <div>
        <label>Tipo de asiento:</label>
        <select @bind="boleto.asiento" aria-label=".form-select-sm example">
            <option value="VIP">VIP</option>
            <option value="Popular">Popular</option>
            <option value= "General">General</option>
        </select>
    </div>
    <p></p>
    <button  type="button" class="btn btn-outline-success grap-4" @onclick="Reservar">Reservar</button>
     @if (reservaExitosa)
        {
            <p></p>
            <p>¡Reservación exitosa! a reservado @reducir boletos</p>
        }
        
        @if (!string.IsNullOrEmpty(mensajeError))
        {
            <p>Error: @mensajeError</p>
        }
    </div>
}



</div>
    </div>
                </div>
            </div>
        </div>

@code {
    EventoDto evento;
    BoletoDto boleto;
    private string mensajeError;
    public int cantidadBoletos {get; set;}
    public double reducir {get; set;} 
    public double resultado{get; set;} 
    public int precio {get; set;}
    List<Boleto> boletosDisponibles = new List<Boleto>();
    List<BoletoDto> boletosReservados = new List<BoletoDto>();

    private bool reservaExitosa = false;

    [Parameter]
    public string eventoId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Evento();
        await Boletos();
       
    }

    private async Task Evento()
    {
        evento = await Http.GetFromJsonAsync<EventoDto>($"/eventos/eventos/find/{eventoId}");
    }
 
    private async Task Boletos(){
        boleto = await Http.GetFromJsonAsync<BoletoDto>($"/boletos/boleto/find/{eventoId}");
    }
   
     private async Task Reservar()
    {
        try
        {
            if(reducir > boleto.cantidadBoletos ){
                mensajeError = "La cantidad de boletos solicitada sobrepasa la cantidad disponible";
                return;
            }
            if (reducir == 0) {
                mensajeError = "La cantidad de boletos no es válida";
                return;
            }
            resultado =  boleto.cantidadBoletos - reducir;
            boleto.cantidadBoletos = resultado;

            boletosReservados.Add(boleto);

            reservaExitosa = true;
            mensajeError = null;

            Http.PutAsJsonAsync<BoletoDto>($"boletos/boleto/update/{boleto.boletoId}", boleto);
            
            
        }
        catch (Exception ex)
        {
           
            reservaExitosa = false;
            mensajeError = ex.Message;
        }
    }

}
